600.426 - Programming Languages
JHU Spring 2014
Homework - 6 (50 Points)

--------------------------------------------------------------------------------
HEADER: PLEASE FILL THIS IN
--------------------------------------------------------------------------------

Name                  :  Fenghuan Lu
List of team Members  :  
List of discussants   : 

--------------------------------------------------------------------------------
 Actors
--------------------------------------------------------------------------------

The following question involves actor programming.

1a. While the AFbV interpreter has lists built in, they are also
    encodable after a fashion by using an actor to embody a list. A
    list actor can handle exactly one type of message: "`next(cust)",
    where "cust" is the customer, the address of the actor to which to
    send the next element of the list.  When responding to a
    "`next(cust)" message, the list actor will either send a
    "cust <- `some(v)" message, where "v" is the next value in the list, or
    "cust <- `none(_)" if the entire list has already been consumed. After it
    sends a "`none(_)" response, it will only ever send "`none(_)"
    responses.  So, these lists can be read only once and then they
    are gone.

    Write an actor that corresponds to the above list interface and
    represents the list [1;2;3].

   [5 Points]
   (* ====== Answer ======= *)
   Let y = (Function body -> Let wrapper = Function self -> Function msg ->
             body (self self) msg In wrapper wrapper) In
   Let listActorFn = Function me -> y (Function this -> Function data -> Function msg ->
            Match msg With 
              `next(cust) -> 
                 If data = 3 Then (cust<- `none(0)); this data
                 Else (cust<- `some(data + 1) ); this (data + 1)
            )
   In

1b. Write an actor 

    Let summateList = (* fill in *)

    so that 

    In summateList <- `summate(alist,cust)

    would summate all the (integer) values in alist, an actor-defined
    list as described in 1a, and send the final answer to actor cust,
    the customer, as a message e.g. cust <- `answer(6).

   [10 points]

   (* ====== Answer ======= *)
   Let summateFn = Function me -> y (Function this -> Function data -> Function msg -> 
                  Match msg With
                     `summate(alist_cust) -> 
                                Let alist = Fst alist_cust In
                                Let cust = Snd alist_cust In
                                (alist <- `next(me)); this (0, (alist, cust))
                   | `some(n) -> ((Fst (Snd data)) <- `next(me)); this (((Fst data) + n), (Snd data))
                   | `none(_) -> ((Snd (Snd data)) <- `answer((Fst data))); this data 
                   )
   In
   Let summateList = Create(summateFn, (0,(0,0)) ) In

(* ===== debug 1.a and 1.b, copy into  AFbV ===== *)
  Let y = (Function body -> Let wrapper = Function self -> Function msg ->
             body (self self) msg In wrapper wrapper) In
  Let listActorFn = Function me -> y (Function this -> Function data -> Function msg ->
            Match msg With 
              `next(cust) -> 
                 If data = 3 Then (cust<- `none(0)); this data
                 Else (cust<- `some(data + 1) ); this (data + 1)
            )
   In
   Let listActor = Create(listActorFn, 0) In
   Let summateFn = Function me -> y (Function this -> Function data -> Function msg -> 
                  Match msg With
                     `summate(alist_cust) -> 
                                Let alist = Fst alist_cust In
                                Let cust = Snd alist_cust In
                                (alist <- `next(me)); this (0, (alist, cust))
                   | `some(n) -> ((Fst (Snd data)) <- `next(me)); this (((Fst data) + n), (Snd data))
                   | `none(_) -> ((Snd (Snd data)) <- `answer((Fst data))); this data 
                   )
   In
   Let summateList = Create(summateFn, (0,(0,0)) ) In
   Let printSumFn = Function me -> y (Function this -> Function data -> Function msg ->
        Match msg With
        `answer(v) -> (Print v); this data
       ) 
  In
  Let printSum = Create(printSumFn, 0) In
  summateList <- `summate((listActor, printSum));;

(*======  end of debug ========*)
 




1c. Write an AFbV actor that parallelizes summateList:

    Let parSummateList = (* fill in *)
    Let printSumFn = Function me -> y (Function this -> Function data -> Function msg ->
        Match msg With
        `answer(v) -> (Print v); this data
       ) 
    In
    Let printSum = Create(printSumFn, 0) In

    Let summateListActor1 = Create(summateFn, (0,(0,0))) In
    Let summateListActor2 = Create(summateFn, (0,(0,0))) In
    Let summateListActor3 = Create(summateFn, (0,(0,0))) In
    Let summateListActor4 = Create(summateFn, (0,(0,0))) In
    Let reducerFn = Function me -> y (Function this -> Function data -> Function msg ->
        Match msg With 
        `answer(v) -> 
            Let cust = (Fst data) In
            Let count = (Fst (Snd data)) In
            Let sum = (Snd (Snd data)) In
            If Fst count = 3 Then cust <- `answer (sum + v); this data
            Else this (cust, (count + 1, sum + v))
        )  
    In
    Let reducer = Create(reducerFn, (printSum, (0,0)) In
    Let parSummateListActorFn = Function me -> y (Function this -> Function data -> Function msg ->
        Match msg With 
            `summate(alist, cust) -> 
                           summateListActor1 <- `summate(alist, reducer); 
                           summateListActor2 <- `summate(alist, reducer);
                           summateListActor3 <- `summate(alist, reducer);
                           summateListActor4 <- `summate(alist, reducer);
                           this data
        ) 
    In 
    Create(parSummateListActorFn, 0)
  ;;

    so that 

    In parSummateList <- `summate(alist,cust)


    has the exact same functional behavior as the above summateList
    actor, but in fact (internally) creates four summateList actors
    and puts them to work summating the list elements, and then
    combines their `answer results to give the final sum `answer. Take
    advantage of the fact that addition is commutative and
    associative.  (Note that the interpreter will in fact not run any
    faster since it is not multithreaded.)

    [10 points]

--------------------------------------------------------------------------------
 Objects in Python
--------------------------------------------------------------------------------

2a. In lecture we sketched how Python views objects by providing a
    rough outline of an FbSR encoding of Python's object model.  See
    http://pl.cs.jhu.edu/pl/lectures/dynamic-lang-study.shtml#python_objects
    for some details.  Show this encoding in action by encoding the
    usual PointClass in the book: define FbSR expression pointClass
    and write code to create a point and send it the isZero message.
    Your magnitide method can just sum the x and y fields, no need for
    square/root.  Make sure your object encoding will allow isZero to
    be implemented by invoking the point's own magnitude method.  Note
    that the lecture encoding above is incomplete, it needs to be
    modified a bit to allow methods in an object to invoke other
    methods in the same object.

    [15 Points]
    (* ===== Answer ====== *)
     Let pointClass = {
        new = Function thisclass ->
              { x = Ref 0; y = Ref 0; class = thisclass }; (* the "object" is just the fields and my class *)
        magnitute = Function thisob -> Function _ -> !(thisob.x) + !(thisob.y);

        isZero = Function thisob -> Function _ -> ((thisob.class.magnitute) thisob {}) = 0
     } In
    Let pointOb = (pointClass.new) pointClass In (* object creation -- need to pass class to itself *)
    (pointOb.class.isZero) pointOb {}  (* message sending starting from ob only, not its class *)

     2b. The Python encoding of objects into FbSR works fine in a
    dynamically-typed context, but our subtype-based STFb language is
    too weak to type the encoding.  Show why this is the case (note
    that STFb has no state so it cannot type the mutable fields; you
    can assume for this quesiton that fields are simply immutable
    values).  In particular, show that the types of STFb are too weak
    and no type annotation will allow the encoding to typecheck.

    [10 Points]
    (* ===== Answer ====== *)
    TFb only has follow type: 
      Int | Bool | Arrow of fbtype * fbtype | Rec of label * fbtype list | Rf of fbtype

    And the class is encoded by record, there is not way in STFb to annotate record. In the example of 2.a., there is no way for TFb to
    annotate the "thisclass" in "new = Function thisclass -> ...."

